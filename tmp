=== psql 
You can configure Greenplum Database to display log messages on the psql command line by setting the Greenplum Database server configuration parameter client_min_messages to LOG. See the Greenplum Database Reference Guide for information about the parameter.
== partitioning 
List partition constraints WITH tbl AS (SELECT oid, partitionlevel AS level,              partitiontablename AS part          FROM pg_partitions, pg_class          WHERE tablename = 'mlp' AND partitiontablename=relname             AND partitionlevel=1 )   SELECT tbl.part, consrc     FROM tbl, pg_constraint     WHERE tbl.oid = conrelid ORDER BY consrc;
Adding/dropping subpartition ALTER TABLE mlp ALTER PARTITION FOR (RANK(2))  DROP PARTITION asia ;ALTER TABLE mlp ALTER PARTITION FOR (RANK(2))  ADD PARTITION canada VALUES ('canada');
== Writable external tables 
== UNLOAD using copy 
=== XML in external tables 

===== FOrmatting data (COPY, gpfdist, etc)

=== Query processing 
== GPORCA 

== Misc NEW and OLD column qualifiers can appear only in rewrite rules (what are rewrite rules?)
SQL-based function CREATE FUNCTION dept(text) RETURNS dept    AS $$ SELECT * FROM dept WHERE name = $1 $$    LANGUAGE SQL;
Retrieve array element from a function that returns array (arrayfunction(a,b))[42]
x::time + '2 hour'::interval
== Composite types SELECT ARRAY[1,2,3+4];
Multidimensional arrays must be rectangular SELECT ARRAY[ARRAY[1,2], ARRAY[3,4]];
Array can be constructed from a query SELECT ARRAY(SELECT oid FROM pg_proc WHERE proname LIKE 'bytea%');
ROW() builds a row value (also called a composite value) from values for its member fields.SELECT ROW(1,2.5,'this is a test');SELECT ROW(t.*, 42) FROM t;SELECT ROW(t.f1, t.f2, 42) FROM t;
= Functions 
https://gpdb.docs.pivotal.io/43160/admin_guide/query/topics/functions-operators.htmlBy default, user-defined functions are declared as VOLATILE, so if your user-defined function is IMMUTABLE or STABLE, you must specify the correct volatility level when you register your function.
To ensure data consistency, you can safely use VOLATILE and STABLE functions in statements that are evaluated on and run from the master. For example, the following statements run on the master (*statements without a FROM clause*):
SELECT setval('myseq', 201);SELECT foo();
If a statement has a FROM clause containing a distributed table and the function in the FROM clause returns a set of rows, the statement can run on the segments:
SELECT * from foo();
Greenplum Database does not support functions that return a table reference (rangeFuncs) or functions that use the refCursor datatype.
List of all functionshttps://gpdb.docs.pivotal.io/43160/admin_guide/query/topics/functions-operators.html
unnest (array[]) unnest( array['one', 'row', 'per', 'item']) Transforms a one dimensional array into rows. Returns a set of anyelement, a polymorphic pseudotype in PostgreSQL. 
sum(array[]) sum(array[[1,2],[3,4]])Example:CREATE TABLE mymatrix (myvalue int[]);INSERT INTO mymatrix VALUES (array[[1,2],[3,4]]);INSERT INTO mymatrix VALUES (array[[0,1],[1,0]]);SELECT sum(myvalue) FROM mymatrix; sum --------------- {{1,3},{4,4}}
Performs matrix summation. Can take as input a two-dimensional array that is treated as a ma
Unpivot and assign atribute names A1 A2 A3SELECT id, class, unnest(array['A1', 'A2', 'A3']) as attr, unnest(array[a1,a2,a3]) as value FROM class_example; 
== Execution plans 
cost —Measured in units of disk page fetches (1.0 = one sequential disk page read)first value ... second value first value - how many pages needed to return first row second value - how many pages to return all rows (sometimes not all are needed, e.g. when LIMIT clause is used)
rows - number of rows returned by a plan node (can be lower than number of rows scanned, e.g. WHERE )
EXPLAIN ANALYZE plan shows the actual execution cost along with the optimizer's estimates. This allows you to see if the optimizer's estimates are close to reality.
This indicates spill:Work_mem used: 64K bytes avg, 64K bytes max (seg0).Work_mem wanted: 90K bytes avg, 90K byes max (seg0) to lessen workfile I/O affecting 2 workers.
Adjust enable_<operator> parameters to see if you can force optimizer to choose a different plan by disabling a particular query plan operator for that query.
If the plan is not choosing the optimal join order, set join_collapse_limit=1 and use explicit JOIN syntax in your SQL statement to force the legacy query optimizer (planner) to the specified join order.
To enable the query optimizer to choose hash operations, there must be sufficient memory available to hold the estimated number of rowsTry increasing work memory to improve performance for a query. If possible, run an EXPLAIN ANALYZE for the query to show which plan operations spilled to disk, how much work memory they used, and how much memory was required to avoid spilling to disk.


